Here are some basic examples of how to use the NumPy library in Python for common numerical operations and array manipulation tasks:

1. Import NumPy:

python

import numpy as np

2. Creating NumPy Arrays:

You can create NumPy arrays using various methods.

    Creating an array from a list:

python

arr = np.array([1, 2, 3, 4, 5])

    Creating a 2D array (matrix):

python

matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

    Creating an array of zeros:

python

zeros = np.zeros(5)  # Creates an array of 5 zeros

    Creating an array of ones:

python

ones = np.ones((2, 3))  # Creates a 2x3 array of ones

    Creating a range of values:

python

rng = np.arange(0, 10, 2)  # Creates an array from 0 to 10 (exclusive) with a step of 2

3. Basic Array Operations:

    Array arithmetic:

python

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
result = a + b  # Element-wise addition

    Array multiplication:

python

product = a * b  # Element-wise multiplication

4. Array Indexing and Slicing:

    Accessing elements:

python

element = arr[2]  # Access the element at index 2 (zero-based)

    Slicing:

python

subarray = arr[1:4]  # Get a subarray from index 1 to 4 (exclusive)

5. Array Shape and Reshaping:

    Get the shape of an array:

python

shape = matrix.shape  # Returns a tuple (number of rows, number of columns)

    Reshaping an array:

python

reshaped = matrix.reshape(3, 2)  # Reshape a 3x3 matrix to a 3x2 matrix

6. Statistical Operations:

    Compute the mean and standard deviation:

python

mean = np.mean(arr)
std_dev = np.std(arr)

    Find the maximum and minimum values:

python

max_val = np.max(arr)
min_val = np.min(arr)

7. Linear Algebra Operations:

    Matrix multiplication:

python

matrix_a = np.array([[1, 2], [3, 4]])
matrix_b = np.array([[5, 6], [7, 8]])
result = np.dot(matrix_a, matrix_b)

8. Generating Random Data:

    Generate random numbers from a normal distribution:

python

random_data = np.random.normal(0, 1, 5)  # Generate 5 random numbers with mean 0 and standard deviation 1

These are some basic examples of what you can do with NumPy. NumPy is a powerful library for numerical and array-based operations, and it's widely used in scientific computing, data analysis, and machine learning. You can perform more advanced operations and calculations using NumPy as well.
